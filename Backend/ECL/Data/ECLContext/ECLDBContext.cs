// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ECL.Data.ECLContext;

public partial class ECLDBContext : DbContext
{
    public ECLDBContext(DbContextOptions<ECLDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TDatafile> TDatafile { get; set; }

    public virtual DbSet<TDatafileColumn> TDatafileColumn { get; set; }

    public virtual DbSet<TDatafileRelations> TDatafileRelations { get; set; }

    public virtual DbSet<TDataset> TDataset { get; set; }

    public virtual DbSet<TDatasetRelations> TDatasetRelations { get; set; }

    public virtual DbSet<TJoinTypes> TJoinTypes { get; set; }

    public virtual DbSet<TMenuMaster> TMenuMaster { get; set; }

    public virtual DbSet<TRoleMaster> TRoleMaster { get; set; }

    public virtual DbSet<TRoleMenuMapping> TRoleMenuMapping { get; set; }

    public virtual DbSet<TUserMaster> TUserMaster { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TDatafile>(entity =>
        {
            entity.HasKey(e => e.DatafileId);

            entity.Property(e => e.DatafileName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TDatafileColumn>(entity =>
        {
            entity.HasKey(e => e.DatafileColumnId);

            entity.Property(e => e.DatafileColumnName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TDatafileRelations>(entity =>
        {
            entity.HasKey(e => e.DatafileRelationId);
        });

        modelBuilder.Entity<TDataset>(entity =>
        {
            entity.HasKey(e => e.DatasetID);

            entity.Property(e => e.DatasetName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TDatasetRelations>(entity =>
        {
            entity.HasKey(e => e.DatasetRelationId);

            entity.Property(e => e.MergedFileName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TJoinTypes>(entity =>
        {
            entity.HasKey(e => e.JoinId);

            entity.Property(e => e.JoinType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TMenuMaster>(entity =>
        {
            entity.HasKey(e => e.MenuId);

            entity.Property(e => e.MenuId).ValueGeneratedNever();
            entity.Property(e => e.Logo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MenuName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MenuTag)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TRoleMaster>(entity =>
        {
            entity.HasKey(e => e.RoleId);

            entity.Property(e => e.RoleId).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TRoleMenuMapping>(entity =>
        {
            entity.HasKey(e => e.MappingId);

            entity.Property(e => e.MappingId).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<TUserMaster>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}